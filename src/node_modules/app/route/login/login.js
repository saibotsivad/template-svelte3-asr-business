import catchify from 'app/module/catchify.js'
import fetchCurrentUser from 'app/api/fetch-current-user.js'
import Login from './Login.svelte'
import loginUser from 'app/api/login-user.js'

const makeRedirect = parameters => {
	const redirect = {
		name: 'app'
	}
	if (parameters.redirect) {
		try {
			const { name, params } = JSON.parse(parameters.redirect)
			redirect.name = name
			redirect.params = params
		} catch (ignore) {
			console.error('Could not parse redirect properties.', parameters.redirect)
		}
	}
	return redirect
}

export default ({ asr }) => {
	asr.addState({
		name: 'login',
		route: '/login',
		template: Login,
		/*
		In the login resolve, we attempt to do a fetch of the
		current user. If the user is authenticated, we can
		redirect to the default page.

		However, if the user attempted to access some page
		which required authentication, they'll be kicked over
		to this login page, but with their originally desired
		location as query parameters. Once they log in, we can
		direct them back to wherever they were originally headed.
		*/
		resolve: async (data, parameters) => {
			try {
				const currentUser = await fetchCurrentUser()
				if (currentUser) {
					return Promise.reject({
						redirectTo: makeRedirect(parameters)
					})
				}
			} catch (ignore) {
			}
		},
		activate: ({ domApi, parameters }) => {
			domApi.$on('login', async ({ detail: { username, password } }) => {
				const [ error ] = await catchify(loginUser({ username, password }))
				if (error) {
					console.log('????', error)
					domApi.$set({ error: 'yes' })
				} else {
					const { name, params } = makeRedirect(parameters)
					asr.go(name, params)
				}
			})
		}
	})
}
